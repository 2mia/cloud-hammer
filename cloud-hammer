#!/bin/bash

set -e

while getopts ":f" opt; do
  case $opt in
    f)
      echo "WARN: force mode enabled" >&2
      shift $(( ${OPTIND} - 1 ))
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

function usage {
    echo "Usage:  $0 <stack-name> <cloud-formation-template.json> <cloud-formation-template.properties|json>"
    echo ""
    echo "      Creates or updates a cloudformation stack"
    echo "      - stack gets created if it does not exist"
    echo "      - stack gets updated otherwise. A diff message will be prompted showing the changes that will be applied"
    echo "Parameters:"
    echo "      -f      forced mode enabled; will bypass user prompts and assume [Y] as answers"
    exit -1
}

function param_validate {
    CF_JSON=${CF:-$(cat $CF_FILE)}
    #validate or die if the parameter does not exist in the cloudformation
    set +e
    (echo $CF_JSON | jq -e ".Parameters.$key" > /dev/null ) 
    if [ $? -ne 0 ]; then
        echo "param not in CF [$key]" && exit 1
    fi
    set -e
}

function aws_get_json {
    set +e
    AWS_CF_JSON=`aws cloudformation get-template --stack-name $STACK_NAME 2>&1`
    ( echo $AWS_CF_JSON | grep "ExpiredToken" &> /dev/null ) && echo "ERROR => credentials expired" && exit -1
    if ( echo $AWS_CF_JSON | grep "does not exist" &> /dev/null ); then
        #stack does not exist error
        echo stack $STACK_NAME does not exist
        AWS_CF_JSON=""
    fi
    set -e
}

function aws_create_stack {
    echo "[*] creating stack $STACK_NAME ...."
     [ -z "$LONG_PARAMS" ] || PARAMS="--parameters $LONG_PARAMS"
    aws cloudformation $AWS_ACTION --stack-name $STACK_NAME --capabilities "CAPABILITY_IAM" --template-body file://$CF_FILE $PARAMS
}
function aws_update_stack {
    echo "[*] calculating update - diff"

    #format / indent json files
    f1=/tmp/json-$$-local.json
    echo $CF_JSON     | jq --sort-keys  . > $f1
    f2=/tmp/json-$$-remote.json
    echo $AWS_CF_JSON | jq --sort-keys  ".TemplateBody" > $f2

    (set +e ; 
        diff $f2 $f1 && echo "no changes, this will not be executed anyway by 'aws cli'";
        true;
    )

    rm -fr /tmp/json-$$-*

    echo
    read -p "Are you sure to apply the changes? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
    echo "[*] updating stack $STACK_NAME ...."
    [ -z "$LONG_PARAMS" ] || PARAMS="--parameters $LONG_PARAMS"
    aws cloudformation $AWS_ACTION --stack-name $STACK_NAME --capabilities "CAPABILITY_IAM" --template-body file://$CF_FILE $PARAMS
}

function load_params_properties {
    while read line; do
        #trim
        line=${line##+([[:space:]])}; x=${line%%+([[:space:]])} 
        #continue if empty
        [ -z "$line" ] && continue

        key=`echo $line|cut -d '=' -f1`
        val=`echo $line|cut -d '=' -f2`

        echo "    check param: $key => $val"
        param_validate $key
        LONG_PARAMS="$LONG_PARAMS ParameterKey=$key,ParameterValue=\"$val\""
        #echo "=> $LONG_PARAMS"
        
    done < $CF_PARAMS
}

function load_params_json {
    CF_PARAMS_TEMP=/tmp/ch-params-$$.properties
    cat $CF_PARAMS | jq '.[] |[.ParameterKey, .ParameterValue] | join("=")' -r >> $CF_PARAMS_TEMP
    export CF_PARAMS=$CF_PARAMS_TEMP
    load_params_properties
    rm $CF_PARAMS_TEMP
}

[ "$#" -lt 2 ] && usage

STACK_NAME=$1
CF_FILE=$2
CF_PARAMS=$3

[ -z "$3" ] && CF_PARAMS="${CF_FILE%.*}.properties"


echo hammer understood this: $STACK_NAME $CF_FILE $CF_PARAMS

# validate json
echo -n "validation json" && cat $CF_FILE | jq . > /dev/null && echo "   [ok]"

# load cloadformation as json text
CF_JSON=${CF:-$(cat $CF_FILE)}

(echo $CF_PARAMS | grep "properties$") && load_params_properties 
(echo $CF_PARAMS | grep "json$") && load_params_json

aws_get_json

[ -z "$AWS_CF_JSON" ] && AWS_ACTION="create-stack"
[ ! -z "$AWS_CF_JSON" ] && AWS_ACTION="update-stack"


case $AWS_ACTION in
    update-stack)
        aws_update_stack
        ;;
    create-stack)
        aws_create_stack 
        ;;
    *)
        usage
        exit 1
        ;;
esac
